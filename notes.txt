
코드로 배우는 스프링 웹 프로젝트

[환경설정]
*예제소스
https://cafe.naver.com/gugucoding
Q&A코드로 배우는 Spring 실습 > 코배스(개정판)- 2022년 6월 이클립스 메이븐환경 소스코드입니다.
*STS 4
https://spring.io/tools
*롬복 1.18
https://projectlombok.org/download
*오라클 XE 18c
https://www.oracle.com/database/technologies/xe-downloads.html
*SQL developer 23.1
https://www.oracle.com/database/sqldeveloper/technologies/download/
*자바 jdk 8
https://developer.oracle.com/
*톰캣 9
https://tomcat.apache.org/

[팁]
*오라클 에러 날 때
-ojdbc8 추가
-접속 정보 확인
*게시판 목록 에러날 때
-TBL_BOARD REPLYCNT 생성
*로그인 안될 때
-계정/권한생성,PW암호화
*파일 업로드 안될 때
-업로드 폴더 생성
*로그아웃 에러날 때
-persistent_logins 테이블 생성


lombok 설치
프로젝트 우클릭 -> maven -> update maven project

https://mvnrepository.com/
ojdbc8 검색 -> 선택후 maven에 있는 <dependency> 코드 복사 -> pom.xml <dependencies> 안에 붙여넣고 저장
maven dependencies에 ojdbc8 있는지 확인

SELECT 
    p.post_id, 
    p.content, 
    u.name AS user_name
FROM 
    post p
JOIN 
    "user" u ON p.user_id = u.user_id;

-----------------------------------------------------------------------------------------------------------------------------------------------------------
java: OOP, 캡상다

spring: 
프레임워크 - 자주 쓰일 만한 기능들을 한데 모아 놓은 유틸(클래스)들의 모음(집합). 
	     프레임 워크는 필요한 라이브러리와 기능 구현에 필요한 설계도 틀을 함께 제공 
핵심 기술, 주요 특징
	- POJO(Plain Old Java Object) 기반의 구성: 
		java로 생성하는 순수한 객체
		getter/setter를 가진 단순한 자바 오브젝트
	- 의존성 주입(DI)을 통한 객체 간의 관계 구성: 
		프로그래밍에서 구성요소 간의 의존 관계가 소스코드 내부가 아닌 외부의 설정파일을 통해 정의되는 방식
		필요한 부분을 뺐다 꼈다 하면서 적절한 상황에 필요한 기능
	- AOP(Aspect-Oriented-Programming) 지원
		여러 객체에 공통으로 적용할 수 있는 기능을 구분함으로써 재사용성을 높여주는 프로그래밍 기법
		예) Transaction
		프록시(proxy): 클라이언트가 접근하려는 타켓인 것처럼 위장하여 요청을 대신 받는 대리자
			프록시는 요청을 가로채 타깃에게 다시 요청을 위임한다 !
			프록시에서는 부가 기능만 수행 → 핵심 기능은 타깃이 수행
			클라이언트 -> 프록시 -> 타겟
	- 편리한 MVC 구조
	- WAS의 종속적이지 않은 개발 환경

AOP, IoC/DI, PSA
IoC(Inversion of Control, 제어 반전):  
	IoC란 인스턴스 (객체)의 생성부터 소멸까지 객체 생명주기 관리를 개발자가 하는게 아닌 스피링(컨테이너)가 대신 해주는 것
	제어권이 개발자가 아닌 IoC에게 있으며 IoC가 개발자의 코드를 호출하여 그 코드로 생명주기를 제어

데이터베이스 접속을 편하게 사용하기 위해 SQL Mapper 기술과, ORM(Object Relational Mapping) 기술을 제공합니다. 
둘 다 DB와의 연동, 저장을 위한 기술이며, SQL Mapper는 ‘개발자가 작성한 SQL 실행 결과를 객체에 매핑’시켜주는 프레임워크이며, 
ORM은 객체와 DB의 데이터를 ‘자동으로 매핑’시켜주는 프레임워크를 말합니다.
SQL Mapper 기술을 제공하는 것이 ‘MyBatis’이며, ORM 기술을 제공하는 것이 ‘JPA(Java Persistence Api)’입니다.
MyBatis는 개발자가 작성한 SQL 문을 Java 객체로 자동으로 매핑 시켜주는  프레임워크
JPA는 이보다 한발 더 나아가서 SQL 문까지 자동으로 생성해 주고, DB 데이터와 Java 객체를 매핑 시켜주는 기술
https://velog.io/@rladuswl/ORM%EC%9D%98-%EA%B0%9C%EB%85%90-JPA%EC%99%80-MyBatis-%EC%B0%A8%EC%9D%B4

web.xml -> ContextLoaderListener -> root-context.xml -> beans -> bean (싱글톤 기반) 

빈(Bean): 스프링에서 관리되는 객체
불러오는법: (1) xml (파일), (2) @ (소스코드에서)
Beans: 빈의 집합소

Lombok: 컴파일시 흔하게 코드를 작성하는 기능들을 완성해주는 라이브러리
	예) @Setter 어노테이션은 setter 메서드를 만들어주는 역할
	     @Data: @ToString, @EqualsAndHashCode, @Getter/@Setter, @RequiredArgsConstructor 모두 결합한 형태

비동기 통신(Asynchronous Communication)
	서버와 클라이언트 간에 데이터를 주고받을 때, 요청과 응답이 서로 독립적으로 처리되는 것
	웹페이지에서 이미지를 로드하는 경우 비동기적으로 이미지를 처리하며 다른 코드를 동시에 실행할 수 있도록 하는 것

AJAX : 웹 개발의 근본, XMLHttpRequest
Fetch : 신규 강자, Promise 기반 세련된 방식
          XMLHttpRequest의 현대적인 대안으로, 네이티브 Promise 기반의 API를 제공
          async/await도 fetch와 비슷
          브라우저 기본 제공 라이브러리
Axios: HTTP 요청을 위한 외부 라이브러리로, Promise 기반의 API를 제공
        요청과 응답 가로채고 수정 가능
        외부 라이브러리


