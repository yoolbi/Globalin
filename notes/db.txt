설치:
1) oracleXE184
2) sqldeveloper
3) eXERD

sqlplus
사용자명: 
비밀번호: 0716

sqldeveloper
연결: alt+f10

*CRUD(create,retrieve,update,delete)

*트랜잭션(Transaction)
커밋(commit),롤백(rollback)
수동 커밋 필수 (자동커밋 하면 안됨)

*Prepared statement (선처리 방식)이란? 바인딩 변수(?)를 사용하여 sql의 반복되는 내용을 쉽게 구현 가능한 Statement이다. 
SQL 문장이 미리 컴파일되고, 실행 시간 동안 인수 값을 위한 공간을 확보할 수 있다는 점에서 Statement 객체와 다르다.
보안 때문에 무조건 사용해야함.
형식 : sql문 where 조건 = ?;
set(x번째 물음표,넣을값);

*DO IT! 오라클로 배우는 데이터베이스 입문 코드 예제
https://github.com/GroovySunday/doit-oracle/blob/master/chap04/chap04_exercise.sql

-----------------------------------------------------------------------------------------------

*실행 순서: FROM -> WHERE -> GROUP BY -> SELECT -> DISTINCT -> ORDER BY -> LIMIT

##
*chap06
TRIM(삭제옵션(선택), '삭제할 문자(선택)' FROM '원본 문자열 데이터(필수))
NVL(NULL인지 여부를 검사할 데이터 또는 열, 앞의 데이터가 NULL일 경우 반환할 데이터)
DECODE(검사 대상이 될 열 또는 데이터 또는 연산이나 함수의 결과, 
		'조건1', 데이터가 조건1과 일치할 때 반환할 결과,
		'조건2', 데이터가 조건2과 일치할 때 반환할 결과,...)


##	
*chap07
GROUP BY.. HAVING
같은 값을 가진 행을 그룹짓는 SQL 명령어
GROUP BY는 COUNT(), MAX(), MIN(), SUM(), AVG() 등 집계 함수와 함께 사용
예)
SELECT DEPTNO, JOB, AVG(SAL)
  FROM EMP
 WHERE SAL <= 3000
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;


##
*chap08
조인(join)은 두 개 이상의 테이블을 연결하여 하나의 테이블처럼 출력할 때 사용
INNER JOIN(내부 조인)은 두 테이블을 조인할 때, 두 테이블에 모두 지정한 열의 데이터가 있어야 한다.
OUTER JOIN(외부 조인)은 두 테이블을 조인할 때, 1개의 테이블에만 데이터가 있어도 결과가 나온다.

INNER JOIN 예)
SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM,
       E.DEPTNO,
       D.DNAME, D.LOC
  FROM EMP E 
  INNER JOIN DEPT D 
  ON (E.DEPTNO = D.DEPTNO)
 WHERE SAL <= 3000
ORDER BY E.DEPTNO, EMPNO;

OUTER JOIN 예1)
SELECT B.NAME AS HOSPITAL_NAME
        ,A.SYMPTOM
        ,A.CLINICDATE
FROM    CLINIC A
        ,HOSPITAL B
WHERE   A.HOSPITALID(+) = B.HOSPITALID;
--병원 값을 다 보고 싶은데 클리닉 정보가 없으니까 클리닉쪽에 (+)
--진료 정보가 부족해도 병원 정보를 다 보여줌.

OUTER JOIN 예2 오라클 버전)
SELECT C.NAME AS ANIMAL_NAME
        ,A.SYMPTOM
        ,A.CLINICDATE
FROM    CLINIC A
        ,ANIMAL C
WHERE   A.ANIMALID(+) = C.ANIMALID;
--동물 정보를 다 보고 싶은데 진료 정보가 부족하니까 진료 쪽에 (+).
--진료 정보가 없어도 동물 정보를 다 보여줌.

OUTER JOIN 예2 ANSI 버전)
SELECT C.NAME AS ANIMAL_NAME
        ,A.SYMPTOM
        ,A.CLINICDATE
FROM    CLINIC A
RIGHT OUTER JOIN ANIMAL C
ON  A.ANIMALID = C.ANIMALID;


##
*chap10
데이터 조작어 DML(Data Manipulation Language)

데이터 추가
INSERT INTO DEPT_TEMP (DEPTNO, DNAME, LOC)
VALUES (50, 'DATABASE', 'SEOUL');

데이터 수정
UPDATE CLINIC 
SET PRESCRIPTION = '슬개골 탈구 2기이므로, 왠만하시면 회복될때까지 유모차를 이용하세요.'
    ,PRICE = 100000
WHERE CLINICID = '9dba90b4-6605-4871-8c9f-9180ca61203f';

데이터 삭제
DELETE FROM ANIMAL
WHERE ANIMALID = '33c7833c-faa1-4d19-9836-ff2b09431e8b';


##
*chap11
세션: 어떤 활동을 위한 시간이나 기간.
오라클에서 세션은 데이터베이스 접속을 시작으로 여러 디비에서 관련 작업을 수행한 후 접속을 종료하기까지 전체 기간.
lock: 특정 세션에서 조작중인 데이터는 트랜잭션이 완료 되기 전까지 다른 세션에서 조작할 수 없음. 데이터가 잠기는 것.


##
*chap12
데이터 정의어 DDL(Data Definition Language)

생성
CREATE TABLE EMP_DDL(
   EMPNO      NUMBER(4),
   ENAME      VARCHAR2(10),
   JOB        VARCHAR2(9),
   MGR        NUMBER(4),
   HIREDATE   DATE,
   SAL        NUMBER(7,2),
   COMM       NUMBER(7,2),
   DEPTNO     NUMBER(2)
);

CREATE TABLE DEPT_TEMP
    AS SELECT * FROM DEPT;
    
변경
ALTER TABLE EMP_ALTER
 	ADD HP VARCHAR2(20);
ALTER TABLE EMP_ALTER
	RENAME COLUMN HP TO TEL;
ALTER TABLE EMP_ALTER
	MODIFY EMPNO NUMBER(5);
ALTER TABLE EMP_ALTER
 	DROP COLUMN TEL;

테이블 이름 변경
RENAME EMP_ALTER TO EMP_RENAME;

테이블의 데이터를 삭제
TRUNCATE TABLE EMP_RENAME;

테이블을 삭제
DROP TABLE EMP_RENAME;


##
*chap13
*인덱스(INDEX)'는 데이터가 위치한 장소의 정보를 가진 일종의 주소록
CREATE INDEX IDX_ANIMAL_NAME ON ANIMAL(NAME);
COMMENT ON COLUMN ANIMAL.NAME IS '동물명';

SQL튜닝
SELECT /*+INDEX(NAME)*/ 
NAME
FROM HOSPITAL
WHERE NAME LIKE '勝%';

*뷰(VIEW): 가상 테이블, 하나 이상의 테이블을 조회하는 SELECT문을 저장한 객체
1. 편리성: SELECT문의 복잡도를 완화하기 위해
2. 보안성: 테이블의 특정 열을 노출하고 싶지 않을 경우
뷰 생성하기
GRANT CREATE VIEW TO SCOTT;  --localhost에서 
CREATE VIEW VW_EMP20
    AS (SELECT EMPNO, ENAME, JOB, DEPTNO
          FROM EMP
         WHERE DEPTNO = 20);
생성한 뷰 확인하기        
SELECT *
  FROM USER_VIEWS;

생성한 뷰 내용 확인하기
SELECT VIEW_NAME, TEXT_LENGTH, TEXT
  FROM USER_VIEWS;

생성한 뷰 조회하기
SELECT *
  FROM VW_EMP20;
  
*시퀀스(SEQUENCE)
오라클 데이터베이스에서 특정 규칙에 맞는 연속 숫자를 생성하는 객체
CREATE SEQUENCE SEQ_DEPT_DEPTNO
   INCREMENT BY 10
   START WITH 70
   MAXVALUE 90
   MINVALUE 0
   NOCYCLE
   CACHE 2;

(NEXTVAL을 먼저 사용해야 CURRVAL을 확인할 수 있지만 값이 넘어감)
-- 해당 시퀀스의 값을 증가시키고 싶다면 NEXTVAL
SELECT SEQ_DEPT_DEPTNO.NEXTVAL
FROM DUAL;
-- 현재 시퀀스를 알고 싶다면 CURRVAL
SELECT SEQ_DEPT_DEPTNO.CURRVAL
FROM DUAL;

INSERT INTO DEPT (
    DEPTNO
    ,DNAME
    ,LOC
) VALUES (
    SEQ_DEPT_DEPTNO.NEXTVAL
    ,'2024-호텔 2기'
    ,'영등포'
);
   
DROP SEQUENCE SEQ_DEPT_DEPTNO;

*동의어(SYNONYM)
별칭. 테이블,뷰,시퀀스 등 객체 이름 대신 사용할 수 있는 다른 이름을 부여하는 객체. 보안

GRANT CREATE SYNONYM TO SCOTT; --localhost에서 
GRANT CREATE PUBLIC SYNONYM TO SCOTT; --localhost에서 

CREATE SYNONYM E
   FOR EMP;
   
SELECT * FROM E;

DROP SYNONYM E;


##
chap14
*제약조건(NOT NULL, UNIQUE, PRIMARY KEY, FOREIGN KEY, CHECK)


##
chap15
*사용자 권한 관리
CREATE USER ... IDENFIED BY ...
GRANT CREATE SESSION/RESOURCE/CREATE TABLE.. TO ...
DROP USER ...
REVOKE SELECT/.. ON .. FROM ...


##
chap16
*PL/SQL: SQL만으로는 구현이 어렵거나 구현 불가능한 작업을수행하기 위해 오라클에서 제공하는 프로그래밍 언어.
*DECLARE 안에 변수 선언
*BEGIN..END 사이에 실행코드
*-- : 한줄 주석, /*~*/ : 여러줄 주석
*|| : 문자의 합(CONCAT)

*선언
SET SERVEROUTPUT ON; -- 실행 결과를 화면에 출력
BEGIN
   DBMS_OUTPUT.PUT_LINE('Hello, PL/SQL!');
END;
/

DECLARE
   V_EMPNO NUMBER(4) := 7788;
   V_ENAME VARCHAR2(10);
BEGIN
   V_ENAME := 'SCOTT';
   DBMS_OUTPUT.PUT_LINE('V_EMPNO : ' || V_EMPNO);
   DBMS_OUTPUT.PUT_LINE('V_ENAME : ' || V_ENAME);
END;
/

*참조형(행)의 변수에 값을 대입한 후 출력하기
DECLARE
   V_DEPT_ROW DEPT%ROWTYPE;
BEGIN
   SELECT DEPTNO, DNAME, LOC INTO V_DEPT_ROW
     FROM DEPT
    WHERE DEPTNO = 40;
   DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || V_DEPT_ROW.DEPTNO);
   DBMS_OUTPUT.PUT_LINE('DNAME : ' || V_DEPT_ROW.DNAME);
   DBMS_OUTPUT.PUT_LINE('LOC : ' || V_DEPT_ROW.LOC);
END;
/

*IF..ELSIF..ELSE
DECLARE
   V_SCORE NUMBER := 87;
BEGIN
   IF V_SCORE >= 90 THEN
      DBMS_OUTPUT.PUT_LINE('A학점');
   ELSIF V_SCORE >= 80 THEN
      DBMS_OUTPUT.PUT_LINE('B학점');
   ELSIF V_SCORE >= 70 THEN
      DBMS_OUTPUT.PUT_LINE('C학점');
   ELSIF V_SCORE >= 60 THEN
      DBMS_OUTPUT.PUT_LINE('D학점');
   ELSE
      DBMS_OUTPUT.PUT_LINE('F학점');
   END IF;
END;
/

*CASE
DECLARE
   V_SCORE NUMBER := 87;
BEGIN
   CASE TRUNC(V_SCORE/10)
      WHEN 10 THEN DBMS_OUTPUT.PUT_LINE('A학점');
      WHEN 9 THEN DBMS_OUTPUT.PUT_LINE('A학점');
      WHEN 8 THEN DBMS_OUTPUT.PUT_LINE('B학점');
      WHEN 7 THEN DBMS_OUTPUT.PUT_LINE('C학점');
      WHEN 6 THEN DBMS_OUTPUT.PUT_LINE('D학점');
      ELSE DBMS_OUTPUT.PUT_LINE('F학점');
   END CASE;
END;
/

*LOOP
DECLARE
   V_NUM NUMBER := 0;
BEGIN
   LOOP
      DBMS_OUTPUT.PUT_LINE('현재 V_NUM : ' || V_NUM);
      V_NUM := V_NUM + 1;
      EXIT WHEN V_NUM > 4;
   END LOOP;
END;
/

*WHILE
DECLARE
   V_NUM NUMBER := 0;
BEGIN
   WHILE V_NUM < 4 LOOP
      DBMS_OUTPUT.PUT_LINE('현재 V_NUM : ' || V_NUM);
      V_NUM := V_NUM + 1;
   END LOOP;
END;
/

*FOR
BEGIN
   FOR i IN 0..4 LOOP
      CONTINUE WHEN MOD(i, 2) = 1;
      DBMS_OUTPUT.PUT_LINE('현재 i의 값 : ' || i);
   END LOOP;
END;
/

##
chap17
***** 레코드(record)는 자료형이 각기 다른 데이터를 하나의 변수에 저장하는데 사용 ******
DECLARE
   TYPE REC_DEPT IS RECORD(
      deptno NUMBER(2) NOT NULL := 99,
      dname DEPT.DNAME%TYPE,
      loc DEPT.LOC%TYPE
   );
   dept_rec REC_DEPT;
   
   TYPE REC_EMP IS RECORD(
      empno EMP.EMPNO%TYPE,
      ename EMP.ENAME%TYPE,
      dinfo REC_DEPT
   );
   emp_rec REC_EMP;
BEGIN
   dept_rec.deptno := 99;
   dept_rec.dname := 'DATABASE';
   dept_rec.loc := 'SEOUL';

   DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || dept_rec.deptno);
   DBMS_OUTPUT.PUT_LINE('DNAME : ' || dept_rec.dname);
   DBMS_OUTPUT.PUT_LINE('LOC : ' || dept_rec.loc);
   
   INSERT INTO DEPT_RECORD 									--INSERT
   VALUES dept_rec;
   
   dept_rec.deptno := 50;
   dept_rec.dname := 'DB';
   dept_rec.loc := 'SEOUL';

   UPDATE DEPT_RECORD										--UPDATE
      SET ROW = dept_rec
    WHERE DEPTNO = 99;
    
    SELECT E.EMPNO, E.ENAME, D.DEPTNO, D.DNAME, D.LOC   	--SELECT해서 값넣기
     INTO emp_rec.empno, emp_rec.ename,
          emp_rec.dinfo.deptno,
          emp_rec.dinfo.dname,
          emp_rec.dinfo.loc
     FROM EMP E, DEPT D
    WHERE E.DEPTNO = D.DEPTNO
      AND E.EMPNO = 7788;
END;
/

* 연관배열: 인덱스라고도 불리는 키(key), 값(value)으로 구성되는 컬렉션.
  중복되지 않은 유일한 키를 통해 값을 저장하고 불러오는 방식을 사용.
DECLARE
   TYPE ITAB_EX IS TABLE OF VARCHAR2(20)
      INDEX BY PLS_INTEGER;

   text_arr ITAB_EX;

BEGIN
   text_arr(1) := '1st data';
   text_arr(2) := '2nd data';
   text_arr(3) := '3rd data';
   text_arr(50) := '50th data';

   DBMS_OUTPUT.PUT_LINE('text_arr(1) : ' || text_arr(1));
   DBMS_OUTPUT.PUT_LINE('text_arr(2) : ' || text_arr(2));
   DBMS_OUTPUT.PUT_LINE('text_arr(3) : ' || text_arr(3));
   DBMS_OUTPUT.PUT_LINE('text_arr(50) : ' || text_arr(50));
   
   DBMS_OUTPUT.PUT_LINE('text_arr.COUNT : ' || text_arr.COUNT); --4
   DBMS_OUTPUT.PUT_LINE('text_arr.FIRST : ' || text_arr.FIRST); --1
   DBMS_OUTPUT.PUT_LINE('text_arr.LAST : ' || text_arr.LAST); --50
   DBMS_OUTPUT.PUT_LINE('text_arr.PRIOR(50) : ' || text_arr.PRIOR(50)); --3
   DBMS_OUTPUT.PUT_LINE('text_arr.NEXT(50) : ' || text_arr.NEXT(50)); -- (NULL이어서 빈칸)
END;
/

-- %ROWTYPE으로 연관 배열 자료형 지정하기
DECLARE
   TYPE ITAB_DEPT IS TABLE OF DEPT%ROWTYPE
      INDEX BY PLS_INTEGER;

   dept_arr ITAB_DEPT;
   idx PLS_INTEGER := 0;

BEGIN
   FOR i IN(SELECT * FROM DEPT) LOOP
      idx := idx + 1;
      dept_arr(idx).deptno := i.DEPTNO;
      dept_arr(idx).dname := i.DNAME;
      dept_arr(idx).loc := i.LOC;

      DBMS_OUTPUT.PUT_LINE(
      dept_arr(idx).deptno || ' : ' ||
      dept_arr(idx).dname || ' : ' ||
      dept_arr(idx).loc);
   END LOOP;
END;
/


