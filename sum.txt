
#####HTML,CSS,JavaScript#####

1) HTML 폼태그 <form>: 입력을 통해 사용자로부터 정보를 '전달 받는 것'. 웹페이지의 입력 양식.
	속성: name, action, method, target 등
	<input> 태그는 사용자가 다양하게 폼 태그에 입력할 수 있는 공간을 만들어 줌.

2) CSS 셀렉터(Selector): 선택을 해주는 요소. 이를 통해 특정 요소들을 선택하여 스타일을 적용.
	예) 전체 선택자 (* {}), 태그 선택자 (div {}), 클랙스 선택자 (.myClass {}), id 선택자 (#myId {}) 

3) Javascript 이벤트: 웹페이지에서 마우스를 클릭했을 때, 키를 입력했을 때, 특정요소에 포커스가 이동되었을 때 어떤 사건을 발생시키는 것 

4) DOM(Document Object Model): HTML요소를 JavaScript Object처럼 조작할 수 있는 Model.
	HTML의 작은 부분까지 접근할 수 있는 구조로, DOM을 이용하여 HTML로 구성된 웹페이지를 동적으로 움직이게 만들 수 있게 하는 인터페이스.
	예) document.getElementById(id), document.createElement(name), element.setAttribute(name, value)

#####JAVA#####

1) OOP (Object Oriented Programming): 객체의 관점에서 프로그래밍. 프로그램을 수많은 객체라는 기본 단위로 나누고
				이들의 상호작용으로 서술하는 방식. *객체: object, 사물. 클래스의 인스턴스/배열.
	 요소:   1) 캡슐화(Encapsulation): 변수와 함수를 하나의 단위로 묶는 것 (정보 은닉)
		 2) 상속(Inheritance): 자식 클래스가 부모 클래스의 특성과 기능을 그대로 물려받는 것. extends
	 	 3) 다형성(Polymorphism): 하나의 변수/함수가 상황에 따라 다른 의미로 해석될 수 있는 것
		 4) 추상화 (Abstraction): 목적과 관련이 없는 부분을 제거하여 필요한 부분만을 표현하기 위한 개념

2) 클래스: 객체를 만드는 설계도 (객체를 생성하는 틀의 개념)
	 객체의 상태를 나타내는 필드(변수)와 객체의 행동을 나타내는 메소드로 구성됨. JAVA는 클래스들의 모임.

3) 인스턴스: 어떤 클래스로부터 만들어진 객체를 그 클래스의 '인스턴스'라고 함.

4) Singleton: 발전된 형태의 전역변수. 프로그램 상에서 2번째 인스턴스를 만들 수 없게 함.
	     만들어진 클래스의 객체를 단 하나만 사용하며 어디서든 그 객체를 사용 가능하도록 만들어줌

5) 오버로딩 (Overloading): 기존의 method 인자를 이용하여 하나의 함수에 여러 가지 기능을 만든다. 같은 이름을 인자의 수나 자료형이 다름
   오버라이딩 (Overriding): 하위 클래스에서 method를 재정의

6) String: 상수 문자열. 변하지 않음
   String Buffer: 계속 변하는 문자열. 동기화 가능 -> 다중 thread 안전
   String Builder: 계속 변하는 문자열. 동기화 X -> 다중 thread 안전 X

7) 인터페이스: (목적에 맞게) 구현. 부모, 자식 관계인 상속에 얽메이지 않고 공통 기능이 필요할 때. implements
   추상 클래스: 여느 클래스들과 마찬가지로 인스턴스 변수/메소드를 갖지만 이를 상속하는 하위 클래스에 의해서
		구현되어야 할 메소드가 하나 이상 있는 경우. 자신의 기능들을 하위로 확장. extends.
   공통점: Abstract method 강제구현

8) 예외처리: try ~ catch ~ finally
	- RuntimeException: 실행시 발생하는 예외. 발생할수도 아닐수도 있는 경우
	- Exception: 컴파일시 발생하는 예외. 예측이 가능한 경우

9) 자바가상머신(JVM): 운영체제 위에서 실행되는 하나의 프로그램. 자바 프로그램은 JVM 위에서 실행됨.
	메모리공간 1) 메소드 영역: 메소드의 바이트코드, static 변수
		  2) 스택 영역: 지역 변수, 매개 변수
		  3) 힙 영역: 인스턴스

10) 제네릭: 일반화. 원하는 자료형을 정해서 박스에 넣고 박스에 있는 자료형을 컨트롤.

11) 컬렉션 프레임워크: 다수의 요소를 하나의 그룹으로 묶어 효율적으로 저장, 관리할 수 있는 기능을 제공. 가변적
	- List<E>: 인덱스 순서로 요소 저장. 중복 데이터 가능
	- Set<E>: 순서 X. 중복 X. 집합 연산
	- Queue<E>: FIFO
	- Map<E>: key-value. 순서 X. key 중복 X

12) Process: CPU에 의해 메모리에 올려져 실행중인 프로그램
     Thread: 프로세스 안에서 실질적으로 작업을 실행하는 단위. JVM에 의해 관리됨.

13) 전역변수: 전반적 다. 지역 변수: 함수 내에서. 정적 변수: 메모리에 저장

14) 자료형/데이터 타입: 어떤 값의 유형. 데이터 타입에 따라 값이 차지하는 메모리 공간의 크기와, 값이 저장되는 방식이 결정됨.
	- 기본 타입(Primitive type): 값을 저장할 때, 데이터의 실제 값이 저장. 
				   정수형(byte, short, int, long), 실수형(float, double), 문자형(char), 논리형(boolean)
	- 참조 타입(Reference type): 값을 저장할 때, 데이터가 저장된 위치를 나타내는 주소 값이 저장.
				   클래스형Class Type, 인터페이스형Interface Type, 배열형...

15) 별표 출력 프로그램
for(int i=1;i<5;i++){
	for(int j=0;j<i;j++){
		System.out.print("*");
	}
	System.out.println("");
}

#####DB#####

1) Transaction: 데이터베이스의 상태를 변화시키기 위해 수행하는 작업 단위
	       데이터베이스 시스템에서 병행 제어 및 회복 작업 시 처리되는 작업의 논리적 단위
	       하나의 트랜잭션은 commit 되거나 rollback 된다 - 원자성, 일관성, 독립성, 지속성

2) DDL (Data Definition Language): 데이터 정의어 (테이블)
	- CREATE, DROP, ALTER, TRUNCATE, RENAME, COMMENT

3) DML (Data manipulation Language): 데이터 조작어
	- SELECT, INSERT, UPDATE, DELETE, WHERE, COMMIT, ROLLBACK

4) DCL (Data Control Language): 계정 권한
	-COMMIT, ROLLBACK, GRANT, REVOKE

5) CRUD: CREATE, READ, UPDATE, DELETE. 데이터 처리 기능

6) 조인(join)은 두 개 이상의 테이블을 연결하여 하나의 테이블처럼 출력할 때 사용
   INNER JOIN(내부 조인)은 두 테이블을 조인할 때, 두 테이블에 모두 지정한 열의 데이터가 있어야 한다.
   OUTER JOIN(외부 조인)은 두 테이블을 조인할 때, 1개의 테이블에만 데이터가 있어도 결과가 나온다.

7) 인덱스(INDEX)'는 데이터가 위치한 장소의 정보를 가진 일종의 주소록

8) 뷰(VIEW): 가상 테이블, 하나 이상의 테이블을 조회하는 SELECT문을 저장한 객체

9) 시퀀스(SEQUENCE): 오라클 데이터베이스에서 특정 규칙에 맞는 연속 숫자를 생성하는 객체

10) 동의어(SYNONYM): 별칭. 테이블,뷰,시퀀스 등 객체 이름 대신 사용할 수 있는 다른 이름을 부여하는 객체. 보안

11) 서브쿼리: 하나의 SQL 문 내에 있는 또 다른 sql문

12) SQL vs NoSQL
	SQL: 	- 관계형 데이터베이스 (RDBMS)
		- 구조화 쿼리 언어 (SQL) 사용, 미리 정의된 스키마가 있음
		- 테이블 기반
		- 다중 행 트랜잭션에 더 적합
		- MySQL, Oracle
		-> 관계를 맺고 있는 데이터가 자주 변경되는 애플리케이션의 경우, 변경될 여지가 없고, 명확한 스키마가 사용자와 데이터에게 중요한 경우

	NoSQL:	- 비관계형 데이터베이스
		- 구조화되지 않은 데이터를 위한 동적 스키마가 있음
		- 문서, 키-값, 그래프, 와이드 컬럼 스토어
		- 문서나 JSON과 같은 비정형 데이터에 더 적합
		- MongoDB
		-> 정확한 데이터 구조를 알 수 없거나 변경/확장 될 수 있는 경우, 읽기를 자주 하지만, 데이터 변경은 자주 없는 경우, 데이터베이스를 수평으로 확장해야 하는 경우 (막대한 양의 데이터를 다뤄야 하는 경우)


#####JSP#####

1) JSP (Java Server Page): 자바를 기반으로 하는 스크립트 언어. HTML 코드 안에 자바 코드를 삽입.
	- 서버 측 스크립트 언어. 자바 코드를 <% %> 태그 안에.
	*JSP 기본 문법
	선언문: <%! ... %>	자바 변수나 메소드를 정의
	스크립틀릿: <% ... %>  자바 로직 코드를 작성
	표현문: <%= ...%>  변수, 계산식, 메소드 호출 결과를 문자열 형태로 출력 

*디렉티브 태그(directive tag): <%@ page ... include ... taglib ... %> 

2) Servlet: 자바를 사용하여 웹 페이지를 동적으로 생성하는 서버 측 웹 프로그래밍
	- 자바 코드 안에 HTML 태그 삽입. 서버에서 자바 소스가 돌아가게
	- servlet: applet + servlet

3) 애플릿 (applet): 애플릿 뷰어나 www에 의해서 실행되는 작고 간단한 프로그램
		HTML의 <applet 태그에서 자바의 class 파일을 실행

4) 모델 1: servlet	모델 1.5: JSP	모델2: MVC 패턴 (Servlet + JSP)

5) MVC 패턴: Model: 데이터와 비즈니스 로직을 관리/처리. Java class
	     View: 화면. HTML, JSP
	     Controller: View로 요청을 전달 받아 Model로 넘어오는 데이터를 View측에 전달. Servlet

6) 정적: 컴퓨터에 저장된 텍스트 파일을 그대로 보는 것. HTML
   동적: 저장된 내용을 다른 변수로 가공 처리하여 보는 것.

7) HTTP: Hyper Text Protocol:  서버/클라이언트 모델을 따라 데이터를 주고 받기 위한 프로토콜
   HTTPS: Hyper Text Protocol Secure: HTTP에 데이터 암호화가 추가된 프로토콜

8) Framework: 자주 쓰일 만한 기능들을 한데 모아 놓은 유틸(클래스)들의 모음(집합). 필요한 라이브러리와 기능 구현에 필요한 설계도 틀을 함께 제공 (라이브러리+설계도)                 
   Library: application에서 호출할 수 있는 함수와 루틴으로 구성. 라이브러리가 필요한 순간에 인지하고 라이브러리를 직접 추가

9) 자바빈즈: 동적 콘텐츠 개발을 위해 자바 코드를 사용하여 자바클래스로 로직을 작성
	-> 자바 컴포넌트를 이용해서 프로그래밍

10) forward: URL 변화 X. 요청 객체와 응답 객체 유지. 서버내의 다른 리소스 호출.
     redirect: URL 바뀜. 요청 객체와 응답 객체 유지 X. 브라우저로 요청을 전달.

11) Scope: 프로그램상 사용되는 변수들은 사용 가능한 범위를 가지는데, 이 때 변수의 범위
	1). Page : 페이지 내에서 지역변수처럼 사용한다.
	2). Request : http 요청을 WAS가 받아서 웹 브라우저에게 응답할 때까지 변수가 유지되는 경우 사용
	3). Session : 웹 브라우저 별로 변수가 관리되는 경우 사용
	4). Application : 웹 어플리케이션이 시작되고 종료될 때까지 변수가 유지되는 경우 사용
	( * Application > Session > Request > Page )

12) 내장 객체:  JSP 페이지에서 사용할 수 있도록 JSP 컨테이너에 미리 정의된 객체
	1) request : 웹 브라우저의 HTTP 요청 정보를 저장함
	- 반환 유형 : javax.servlet.http.HttpServletRequest
	2) response : 웹 브라우저의 HTTP 요청에 대한 응답 정보를 저장함
	- 반환 유형 : javax.servlet.http.HttpServletResponse
	3) out : JSP 페이지에 출력할 내용을 담고 있는 출력 스트림임
	- 반환 유형 : javax.servlet.jsp.jsp.jspWriter
	4) session : 웹 브라우저의 정보를 유지하기 위한 세션 정보를 저장함
	- 반환 유형 : javax.servlet.http.HttpSession
	5) application : 웹 애플리케이션의 콘텍스트 정보를 저장함
	- 반환 유형 : javax.servlet.ServletContext
	6) pageContext : JSP 페이지의 정보를 저장함
	- 반환 유형 : javax.servlet.PageContext
	7) page : JSP 페이지를 구현한 자바 클래스로 JSP 페이지 자체를 나타냄
	- 반환 유형 : javax.lang.Object
	8) config : JSP 페이지의 설정 정보를 저장함
	- 반환 유형 : javax.servlet.ServletConfig
	9) exception : JSP 페이지의 예외 발생을 처리함
	- 반환 유형 : javax.lang.Throwable

13) JSTL, EL: JSP 코드의 복잡함을 해결. <% %> 사용 X
	JSTL(JSP Standard Tag Library): 사용자 정의 태그의 표준. EL을 사용. <c:set>, <c:if test="true">, <c:forEach>
	EL(Expression Language): ${expr} 

14) 인증(Authentication): 신원 입증, 로그인
     인가, 권한 부여(Authorization): 목적 허용

15) 필터 (filter): 요청과 응답을 거른 뒤 정제하는 역할
     인터셉터 (interceptor): 요청에 대한 작업 전/후로 가로챔
     AOP: OOP 보완 (중복 낮춤)

16) 쿠키,세션: 클라이언트와 웹 서버 간의 상태를 지속적으로 유지하는 방법 
     쿠키 (Cookie): 클라이언트에 저장되는 키와 데이터 값이 들어있는 작은 데이터 타입. 사라지는 시간(때) 지정 가능
     세션 (Session): 서버에서 정보 저장하고 관리 -> 서버 부하, 성능 저하
     캐시 (Cache): 임시 저장소, 사용 빈도가 높은 데이터를 고속으로 액세스 할 수 있는 위치에 두는 것

17) JSP: 자바, 서버 사이드 스크립트, 웹 페이지 작성 vs. JS: 클라이언트 사이드 스크립트, 브라우저 객체 제어

18) Apache Tomcat: 웹 어플리케이션 서버

#####SPRING#####

1) SPRING: JAVA 기술들을 더 쉽게 사용할 수 있게 해주는 오픈소스 프레임 워크

2) 핵심 기술, 주요 특징
	핵심 3요소: POJO를 기반으로 (1) IoC/DI (2) AOP (3) PSA(Portable Service Abstraction)
	- POJO(Plain Old Java Object) 기반의 구성: 
		java로 생성하는 순수한 객체
		getter/setter를 가진 단순한 자바 오브젝트
	- 의존성 주입(DI: Dependency Injection)을 통한 객체 간의 관계 구성: 
		프로그래밍에서 구성요소 간의 의존 관계가 소스코드 내부가 아닌 외부의 설정파일을 통해 정의되는 방식
		필요한 부분을 뺐다 꼈다 하면서 적절한 상황에 필요한 기능
		예) @Bean, @Component, @Autowired
	- AOP(Aspect-Oriented-Programming) 지원
		여러 객체에 공통으로 적용할 수 있는 기능을 구분함으로써 재사용성을 높여주는 프로그래밍 기법
		예) Transaction. @Transactional
		프록시(proxy): 클라이언트가 접근하려는 타켓인 것처럼 위장하여 요청을 대신 받는 대리자
			프록시는 요청을 가로채 타깃에게 다시 요청을 위임한다 !
			프록시에서는 부가 기능만 수행 → 핵심 기능은 타깃이 수행
			클라이언트 -> 프록시 -> 타겟
	- 편리한 MVC 구조
	- WAS의 종속적이지 않은 개발 환경

3) SQL Mapper & ORM: 데이터베이스 접속을 편하게 사용하기 위해. DB와의 연동, 저장을 위한 기술
	- SQL Mapper: '개발자가 작성한 SQL 실행 결과를 객체에 매핑' 시켜주는 프레임워크
		-> SQL Mapper 기술을 제공하는 것이 ‘MyBatis’
		-> MyBatis는 개발자가 작성한 SQL 문을 Java 객체로 자동으로 매핑 시켜주는  프레임워크
	- ORM(Object Relational Mapping): 객체와 DB의 데이터를 ‘자동으로 매핑’시켜주는 프레임워크
		-> ORM 기술을 제공하는 것이 ‘JPA(Java Persistence Api)’
		-> JPA는 이보다 한발 더 나아가서 SQL 문까지 자동으로 생성해 주고, DB 데이터와 Java 객체를 매핑 시켜주는 기술

4) 빈(Bean): 스프링에서 관리되는 객체
	불러오는법: (1) xml (파일), (2) @ (소스코드에서)
	Beans: 빈의 집합소

5) Lombok: 컴파일시 흔하게 코드를 작성하는 기능들을 완성해주는 라이브러리
	예) @Setter 어노테이션은 setter 메서드를 만들어주는 역할
	     @Data: @ToString, @EqualsAndHashCode, @Getter/@Setter, @RequiredArgsConstructor 모두 결합한 형태

6) 비동기 통신(Asynchronous Communication)
	요청과 응답이 동시에 일어나지 않고 나중에 응답하는 것
	웹페이지를 새로고침하지 않고도 데이터를 불러오는 방식
	-> 필요한 부분만 업데이트하기 때문에 웹페이지의 속도와 성능을 향상
	-> 비동기(Async) 통신은 동기(Sync) 통신보다 코드를 작성하고 이해하는 것이 어려워 코드의 복잡도가 증가

	AJAX : 웹 개발의 근본, XMLHttpRequest
	Fetch : 신규 강자, Promise 기반 세련된 방식
          		XMLHttpRequest의 현대적인 대안으로, 네이티브 Promise 기반의 API를 제공
          		async/await도 fetch와 비슷
          		브라우저 기본 제공 라이브러리
	Axios: HTTP 요청을 위한 외부 라이브러리로, Promise 기반의 API를 제공
        		요청과 응답 가로채고 수정 가능
        		외부 라이브러리

7) 동기(Sync)는 요청과 응답이 동시에 일어나는 것. 웹페이지를 새로고침하면서 데이터를 불러오는 방식

8) DTO/VO
	DTO: 로직을 갖고 있지 않은 순수한 데이터 객체이며 메서드로는 getter/setter 만을 갖는다.
	VO: 로직을 포함할 수 있으며, VO의 경우 특정 값 자체를 표현하기 때문에 불변성의 보장을 위해 생성자를 사용

9) Gradle, Maven: 빌드 관리 도구
	빌드: 소스코드 파일을 컴퓨터에서 실행할 수 있는 독립적인 형태로 변환하는 과정과 결과
	빌드 관리도구: 필요한 라이브러리들을 자동으로 관리

10) 테이블 하나당 
	0) DOMAIN: src/main/java/org.zerock.domain
		EeneVO.java에 디비 변수들
	1) QUERY: src/main/resources/org/zerock/mapper에
		EeneMapper.xml에 쿼리문 작성 (mybatis)
		post할때 입력 값을 (0)에 있는 변수 사용하게 됨
	2) QUERY: src/main/java/org.zerock.mapper
		EeneMapper.java에 (1)쿼리문의 인터페이스
   		쿼리문을 실행시킬 인터페이스
	3) SERVICE(MODEL): src/main/java/org.zerock.service
		EeneService.java에 인터페이스
	4) SERVICE(MODEL): src/main/java/org.zerock.service
		EeneServiceImple.java에서 (3) 인터페이스 오버라이드
		(2) EeneMapper인터페이스 실행해서 (1)쿼리문 실행
	5) CONTROLLER: src/main/java/org.zerock.controller
		EeneController.java에서 
		(3) EeneService인터페이스 실행하면 (4)에서 오버라이딩한 결과 실행

	실행 흐름: SERVLET->CONTROLLER-> SERVICE(MODEL)->QUERY


